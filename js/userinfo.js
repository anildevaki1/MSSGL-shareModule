
myapp.controller('userinfodashCtrl', ['$scope', '$state', 'ajax', 'R1Util',
    function ($scope, $state, ajax, R1Util) {

        var vm = this;
        vm.serviceGrid = {
            enableRowSelection: true,
            enableRowHeaderSelection: false,
            multiSelect: false,
            enableSorting: true,
            enableFiltering: true,
            enableGridMenu: true,
            paginationPageSizes: [30, 50, 100, 70],

        };


        vm.serviceGrid.columnDefs = [

            {
                field: 'userName',
                displayName: ' यूजरचे नाव',
                enableSorting: true,
                type: 'string',
                enableCellEdit: false,
                cellClass: 'alignLgrid',
                width: '30%'
            },
            {
                field: 'userEmail',
                displayName: 'मेल',
                enableSorting: true,
                enableCellEdit: false,
                cellClass: 'alignLgrid',
                width: '40%'
            },
            {
                field: 'mobileNo',
                displayName: 'मोबाइल नंबर',
                enableSorting: true,
                enableCellEdit: false,
                cellClass: 'alignLgrid',
                width: '15%'
            },
            {
                name: 'Action ',
                enableSorting: false,
                enableCellEdit: false,
                width: '15%',
                cellTemplate: '<center><a role="button" ng-click="grid.appScope.vm.edit(grid, row)"><i class="bi bi-eye"></i></a>&nbsp &nbsp <a  role="button" ng-click="grid.appScope.vm.remove(grid, row)"><i class="bi bi-trash3"></i></a></center>'
            }
        ];



        vm.edit = function (grid, row) {
            var param = {
                action: 'view',
                id: row.entity.userId
            };
            $state.go('parent.sub.userinfo', param);
        };

        vm.remove = function (grid, row) {
            if (row.entity.userId) {
                $scope.grid = grid;
                $scope.param = { "id": row.entity.userId };
                $scope.index = vm.serviceGrid.data.indexOf(row.entity);

                R1Util.createAlert($scope, "Warning", "Do You Want Delete Row", $scope.iConfirmFn);

            }
        }
        $scope.iConfirmFn = function () {
            ajax.delete('UserInfo', null, $scope.param).then(function (res) {
                $scope.grid.appScope.vm.serviceGrid.data.splice($scope.index, 1);
            })
        };


        vm.getRecords = function () {

            ajax.get('UserInfo/list', null).then(function (res) {
                if (res) {
                    vm.serviceGrid.data = res;
                }
                else {
                    var error = "Error";
                    if (res.error)
                        if (res.error.message)
                            error = res.error.message;
                    R1Util.createAlert($scope, "Error", error, null);
                }
                $(".loading").hide();
            })
        }

        vm.getRecords();

    }])




myapp.controller('UserInfoCtrl', ['$scope', '$state', 'ajax', 'R1Util', '$stateParams', '$q', '$rootScope','Master',
    function ($scope, $state, ajax, R1Util, $stateParams, $q, $rootScope,Master) {
        var vm = this;
        $scope.Master=Master
        vm.mode = 'new';

        if ($stateParams.action)
            vm.mode = $stateParams.action;

        vm.action = function () {
            var deffered = $q.defer();

            vm.navaction(function (res) {
                if (res == "OK")
                    deffered.resolve(res)
                else
                    deffered.reject(res)
            })
            return deffered.promise;
        }


        vm.navaction = function (fn) {
            switch (vm.mode) {
                case 'new':
                    vm.newrecord();
                    fn("OK")
                    break;
                case 'edit':

                    if (vm.entity.vch_id != undefined) {
                        if (NoViewing == true)
                            getExistEntity();
                        if (vm.entity.sh012.length != 0 || vm.entity.sh016.length != 0) {
                            vm.mode = 'undo'
                            R1Util.createAlert($scope, "WarningOk", "Can Not Edit a record Auto Generated by Share Issue ", null);
                        }
                    }
                    fn("OK")
                    break;

                case 'save':
                    $scope.save(function (res) {
                        fn(res)
                    });
                    break;

                case 'undo':
                    if (pastEntity)
                        vm.entity = angular.copy(pastEntity);
                    fn("OK")

                    break;

                case 'close':
                    fn("OK")
                    $rootScope.back();
                    break;



                default:
                    fn("OK")
                    break;
            }
        };
        vm.newrecord = function () {
            vm.entity = {};
        }

        $scope.save = function (fn) {
            if ($scope.userinfoform.$valid) {
                $(".loading").show();
                if (!vm.entity.userId)
                    ajax.post('UserInfo/insert', vm.entity).then(function (res) {

                        vm.entity.userId = res.userId;
                        $(".loading").hide();

                        $scope.message = "Record Saved Sucessfully";
                        R1Util.createAlert($scope, "Success", $scope.message, null);
                        pastEntity = angular.copy(vm.entity);
                        fn("OK");


                    }, function (err) {
                        vm.mode = 'edit';
                        $(".loading").hide();
                        R1Util.createAlert($scope, "Error", err.msg, null);
                        fn("CANCEL")
                    })
                else {
                    ajax.put('UserInfo/update', vm.entity, { id: vm.entity.userId }).then(function (res) {

                        $(".loading").hide();
                        $scope.message = "Record Saved Sucessfully";
                        R1Util.createAlert($scope, "Success", $scope.message, null);
                        pastEntity = angular.copy(vm.entity);
                        fn("OK");

                    }, function (err) {
                        vm.mode = 'edit';
                        $(".loading").hide();
                        R1Util.createAlert($scope, "Error", err.msg, null);
                        fn("CANCEL")
                    })
                }

            }
            else
            {
                R1Util.createAlert($scope, "Error", 'Validation Failed', null);
            }
        }

        $scope.genratepsw = function () {
            vm.entity.password = randomPassword();
        }

        function randomPassword() {
            var chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOP1234567890";
            var pass = "";
            for (var x = 0; x < 8; x++) {
                var i = Math.floor(Math.random() * chars.length);
                pass += chars.charAt(i);
            }
            return pass;
        }

        $(document).ready(function () {
            $("#txtNoSpaces").keydown(function (event) {
                if (event.keyCode == 32) {
                    event.preventDefault();
                }
            });
        });

        $scope.inputType = 'password';

        $scope.changetype = function () {
            if ($scope.inputType == 'password')
                $scope.inputType = 'text';
            else
                $scope.inputType = 'password';
        };

        if ($stateParams.id) {
            ajax.get("userinfo/get", null, { id: $stateParams.id }).then((res) => {
                vm.entity = res;
            });

        }

    }])